## Название проекта
export PROJECT_NAME=projectname

## Статическая линковка бинарника
export PRJ_LDFLAGS="-extldflags '-static'"

## Режим CGO_ENABLED
export PRJ_CGO_ENABLED="1"

## Папки используемые в проекте
define PROJECT_FOLDERS
  bin pkg run src \
  log tmp conf doc \
  template www
endef
export PROJECT_FOLDERS

## Зависимости проекта
define PROJECT_DEPENDENCES
  'if [ "${GO_SERVER_URL}" == "" ]; then rm -rf "${DIR}/src/go.sum" "${DIR}/src/go.mod" "${DIR}/src/vendor"; fi' \
  'if [ ! -f ${DIR}/src/go.mod ]; then cd ${DIR}/src; GO111MODULE="on" GOPATH="$(DIR)" go mod init "${PROJECT_NAME}"; fi' \
  'if [ "${GO_SERVER_URL}" == "" ]; then cd ${DIR}/src; GO111MODULE="on" GOPATH="$(DIR)" go mod download; fi' \
  'if [ "${GO_SERVER_URL}" == "" ]; then cd ${DIR}/src; GO111MODULE="on" GOPATH="$(DIR)" go get; fi' \
  'if [ "${GO_SERVER_URL}" == "" ]; then cd ${DIR}/src; GO111MODULE="on" GOPATH="$(DIR)" go mod tidy; fi' \
  'if [ "${GO_SERVER_URL}" == "" ]; then cd ${DIR}/src; GO111MODULE="on" GOPATH="$(DIR)" go mod vendor; fi'
endef
export PROJECT_DEPENDENCES

## Настройки размещения необходимых файлов для создания RPM пакетов
# Пути к исходному и результирующему файлу должны быть указаны относительно
# корня проекта. Формат: [source file]:[destination file]
define RPM_BUILD_SOURCE
  conf/${PROJECT_NAME}.spec:SPECS/${PROJECT_NAME}.spec \
  conf/${PROJECT_NAME}.service:SOURCES/${PROJECT_NAME}.service \
  conf/${PROJECT_NAME}.sysconfig:SOURCES/${PROJECT_NAME}.sysconfig \
  conf/${PROJECT_NAME}.logrotate:SOURCES/${PROJECT_NAME}.logrotate \
  conf/${PROJECT_NAME}.permissions:SOURCES/${PROJECT_NAME}.permissions \
  conf/${PROJECT_NAME}.tmpfilesd:SOURCES/${PROJECT_NAME}.tmpfilesd \
  conf/${PROJECT_NAME}.example.yml:SOURCES/${PROJECT_NAME}.example.yml \
  conf/${PROJECT_NAME}.example.log.yml:SOURCES/${PROJECT_NAME}.example.log.yml \
  conf/${PROJECT_NAME}.example.yml:SOURCES/${PROJECT_NAME}.yml \
  bin/${PROJECT_NAME}:SOURCES/${PROJECT_NAME}
endef
export RPM_BUILD_SOURCE

## Настройки размещения необходимых файлов для создания RPM пакетов для архитектуры i386
export RPM_BUILD_SOURCE_I386=${RPM_BUILD_SOURCE}

## Команды подготовки данных к созданию RPM
# Все команды выполняются из корня проекта
define RPM_BUILD_COMMANDS
  "tar cf rpmbuild/SOURCES/${PROJECT_NAME}-migrations.tar migrations" \
  "tar cf rpmbuild/SOURCES/${PROJECT_NAME}-template.tar template www"
endef
export RPM_BUILD_COMMANDS

## Команды подготовки данных к созданию RPM для архитектуры i386
export RPM_BUILD_COMMANDS_I386=${RPM_BUILD_COMMANDS}

## Команды запуска проекта
## - Режим разработчика
define PROJECT_RUN_DEVELOPMENT
  'APPLICATION_HOME=$(DIR) \
  APPLICATION_PID=$(DIR)/run/${PROJECT_NAME}.pid \
  APPLICATION_CACHE=$(DIR)/run \
  APPLICATION_STATE=$(DIR)/run/${PROJECT_NAME}.state \
  APPLICATION_SOCKET=$(DIR)/run/${PROJECT_NAME}.sock \
  $(DIR)/bin/${PROJECT_NAME} --debug daemon'
endef
export PROJECT_RUN_DEVELOPMENT
## - Режим продакшн
define PROJECT_RUN_PRODUCTION
  'APPLICATION_HOME=$(DIR) \
  APPLICATION_PID=$(DIR)/run/${PROJECT_NAME}.pid \
  APPLICATION_CACHE=$(DIR)/run \
  APPLICATION_STATE=$(DIR)/run/${PROJECT_NAME}.state \
  APPLICATION_SOCKET=$(DIR)/run/${PROJECT_NAME}.sock \
  $(DIR)/bin/${PROJECT_NAME} daemon'
endef
export PROJECT_RUN_PRODUCTION
